{"version":3,"sources":["Helper.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;IAGP,MAAM;WAAN,MAAM;0BAAN,MAAM;;;eAAN,MAAM;;;;;;;;;WAOa,0BAAC,KAAK,EAAE,UAAU,EAAiB;UAAf,SAAS,yDAAG,CAAC;;AACtD,UAAG,CAAC,KAAK,IAAI,KAAK,KAAK,CAAC,EAAE;AACxB,eAAO,KAAK,CAAC;OACd;;AAED,UAAI,MAAM,GAAG,EAAE,CAAC;AAChB,UAAI,KAAK,IAAI,OAAO,EAAE;;AAEpB,aAAK,IAAI,OAAO,CAAC;AACjB,cAAM,GAAG,GAAG,CAAC;OACd,MAAM,IAAI,KAAK,IAAI,IAAI,EAAE;;AAExB,aAAK,IAAI,IAAI,CAAC;AACd,cAAM,GAAG,GAAG,CAAC;OACd;;AAED,aAAO,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAC5B;AACE,aAAK,EAAE,UAAU,GAAG,UAAU,GAAG,SAAS;AAC1C,gBAAQ,EAAE,KAAK;AACf,6BAAqB,EAAE,SAAS;AAChC,6BAAqB,EAAE,CAAC;OACzB,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;KACnC;;;SA9BG,MAAM;;;qBAiCG,MAAM","file":"Helper-compiled.js","sourcesContent":["'use strict';\n\n\nclass Helper {\n  /**\n   * Returns the a shorter version of the value to display\n   *\n   * @param value The numeric value\n   * @param isCurrency True if the number is a currency, false otherwise\n   */\n  static getDisplayNumber(value, isCurrency, maxDigits = 1) {\n    if(!value && value !== 0) {\n      return value;\n    }\n\n    let suffix = '';\n    if (value >= 1000000) {\n      // Add million as suffix if possible\n      value /= 1000000;\n      suffix = 'M';\n    } else if (value >= 1000) {\n      // Add thousand as suffix if possible\n      value /= 1000;\n      suffix = 'k';\n    }\n\n    return new Intl.NumberFormat('en-GB',\n            {\n              style: isCurrency ? 'currency' : 'decimal',\n              currency: 'GBP',\n              maximumFractionDigits: maxDigits,\n              minimumFractionDigits: 0\n            }).format(value) + suffix;\n  }\n}\n\nexport default Helper;\n"]}