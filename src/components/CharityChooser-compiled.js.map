{"version":3,"sources":["CharityChooser.js"],"names":[],"mappings":"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","file":"CharityChooser-compiled.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport actions from '../actions/index.js';\nimport Autosuggest from 'react-autosuggest';\nimport data from '../grantnav2016_moneySS.json';\nimport './Dashboard.css';\n\n//import 'font-awesome/css/font-awesome.min.css';\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedCharity: state.selectedCharity\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCountry: (name) => {\n            dispatch(actions.setCharity(name));\n        }\n    };\n};\n\nclass CharityChooser extends Component {\n    constructor() {\n        super();\n\n        this.state.value = '';\n    }\n    render() {\n        var foundations = [];\n        let max = 1;\n        let maxMoney = 0;\n        data.forEach((grant) => {\n            const foundation = foundations.find((f) => f.id === grant.f.id);\n            if(foundation) {\n                foundation.count++;\n                foundation.money += grant.am;\n\n                if(foundation.count > max) {\n                    max = foundation.count;\n                }\n\n                if(foundation.money > maxMoney) {\n                    maxMoney = foundation.money;\n                }\n            } else {\n                foundations.push({\n                    name: grant.f.name,\n                    count: 1,\n                    id: grant.f.id,\n                    money: grant.am\n                });\n\n                if(grant.am > maxMoney) {\n                    maxMoney = grant.am;\n                }\n            }\n\n        });\n\n        let maxAvg = 0;\n        foundations.forEach((f) => {\n            f.avg = f.money / f.count;\n            if(f.avg > maxAvg) maxAvg = f.avg\n        });\n\n        foundations.sort((a, b) => b.name - a.name);\n        \n        const inputProps = {\n            value: \"\"\n        };\n        return <div>\n            <Autosuggest\n                suggestions={foundations}\n                getSuggestionValue={sug => sug.name}\n                renderSuggestion={sug => <div>{sug.name}</div>}\n                inputProps={inputProps}\n            />\n        </div>;\n\n        /*return <div>\n                {foundations.map(foundation => {\n                    const size = foundation.count * 200 / max;\n                    const sizeMoney = foundation.money * 200 / maxMoney;\n                    const sizeAvg = foundation.avg * 200 / maxAvg;\n                    return (\n                        <div className=\"foundation\" key={foundation.id}>\n                            {foundation.name}\n                            <div className=\"foundationBubbles\">\n                                <div className=\"bubble foundationBubble\"\n                                     style={{width: size, height: size}}>\n                                    {size > 30 && <div>{foundation.count}</div>}\n                                </div>\n                                <div className=\"bubble foundationBubbleMoney\"\n                                     style={{width: sizeMoney, height: sizeMoney}}>\n                                    {sizeMoney > 30 && <div>{foundation.money}</div>}\n                                </div>\n                                <div className=\"bubble foundationBubbleAvg\"\n                                     style={{width: sizeAvg, height: sizeAvg}}>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>;*/\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharityChooser);\n\n"]}